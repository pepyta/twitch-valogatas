// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["dataProxy", "referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  favorites     Favorite[]
  accounts      Account[]
  sessions      Session[]
  role          Role

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Favorite {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  userId    String
  channelId String
  @@unique([channelId, userId])
  @@map("favorites")
}

model Channel {
  id            String     @id @default(cuid())
  username      String     @unique
  youtube       Boolean
  instagram     Boolean
  discord       Boolean
  tiktok        Boolean
  partner       Boolean
  createdAt     DateTime   @default(now())
  lastUpdatedAt DateTime   @default(now())
  favorites     Favorite[]

  @@map("channels")
}

enum Role {
  ADMIN
  EDITOR
  VISITOR
}
